// Generated by view binder compiler. Do not edit!
package com.malas.appsr.malasapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.malas.appsr.malasapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTakeOrderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnSync;

  @NonNull
  public final ListView listViewShowOutlet;

  @NonNull
  public final TextView llEmptyList;

  @NonNull
  public final LinearLayout llHighlight;

  @NonNull
  public final LinearLayout llSync;

  @NonNull
  public final RelativeLayout rl1;

  @NonNull
  public final EditText spnrDistributr;

  @NonNull
  public final EditText spnrRoute;

  @NonNull
  public final TextView totalOutlet;

  @NonNull
  public final ImageView tvHighlightGreen;

  @NonNull
  public final TextView tvHighlightGreenText;

  @NonNull
  public final ImageView tvHighlightRed;

  @NonNull
  public final TextView tvHighlightRedText;

  @NonNull
  public final TextView tvTerritoryOutlet;

  private ActivityTakeOrderBinding(@NonNull LinearLayout rootView, @NonNull Button btnSync,
      @NonNull ListView listViewShowOutlet, @NonNull TextView llEmptyList,
      @NonNull LinearLayout llHighlight, @NonNull LinearLayout llSync, @NonNull RelativeLayout rl1,
      @NonNull EditText spnrDistributr, @NonNull EditText spnrRoute, @NonNull TextView totalOutlet,
      @NonNull ImageView tvHighlightGreen, @NonNull TextView tvHighlightGreenText,
      @NonNull ImageView tvHighlightRed, @NonNull TextView tvHighlightRedText,
      @NonNull TextView tvTerritoryOutlet) {
    this.rootView = rootView;
    this.btnSync = btnSync;
    this.listViewShowOutlet = listViewShowOutlet;
    this.llEmptyList = llEmptyList;
    this.llHighlight = llHighlight;
    this.llSync = llSync;
    this.rl1 = rl1;
    this.spnrDistributr = spnrDistributr;
    this.spnrRoute = spnrRoute;
    this.totalOutlet = totalOutlet;
    this.tvHighlightGreen = tvHighlightGreen;
    this.tvHighlightGreenText = tvHighlightGreenText;
    this.tvHighlightRed = tvHighlightRed;
    this.tvHighlightRedText = tvHighlightRedText;
    this.tvTerritoryOutlet = tvTerritoryOutlet;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTakeOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTakeOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_take_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTakeOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_sync;
      Button btnSync = ViewBindings.findChildViewById(rootView, id);
      if (btnSync == null) {
        break missingId;
      }

      id = R.id.list_view_show_outlet;
      ListView listViewShowOutlet = ViewBindings.findChildViewById(rootView, id);
      if (listViewShowOutlet == null) {
        break missingId;
      }

      id = R.id.ll_empty_list;
      TextView llEmptyList = ViewBindings.findChildViewById(rootView, id);
      if (llEmptyList == null) {
        break missingId;
      }

      id = R.id.ll_highlight;
      LinearLayout llHighlight = ViewBindings.findChildViewById(rootView, id);
      if (llHighlight == null) {
        break missingId;
      }

      id = R.id.ll_sync;
      LinearLayout llSync = ViewBindings.findChildViewById(rootView, id);
      if (llSync == null) {
        break missingId;
      }

      id = R.id.rl1;
      RelativeLayout rl1 = ViewBindings.findChildViewById(rootView, id);
      if (rl1 == null) {
        break missingId;
      }

      id = R.id.spnr_distributr;
      EditText spnrDistributr = ViewBindings.findChildViewById(rootView, id);
      if (spnrDistributr == null) {
        break missingId;
      }

      id = R.id.spnr_route;
      EditText spnrRoute = ViewBindings.findChildViewById(rootView, id);
      if (spnrRoute == null) {
        break missingId;
      }

      id = R.id.total_outlet;
      TextView totalOutlet = ViewBindings.findChildViewById(rootView, id);
      if (totalOutlet == null) {
        break missingId;
      }

      id = R.id.tv_highlight_green;
      ImageView tvHighlightGreen = ViewBindings.findChildViewById(rootView, id);
      if (tvHighlightGreen == null) {
        break missingId;
      }

      id = R.id.tv_highlight_green_text;
      TextView tvHighlightGreenText = ViewBindings.findChildViewById(rootView, id);
      if (tvHighlightGreenText == null) {
        break missingId;
      }

      id = R.id.tv_highlight_red;
      ImageView tvHighlightRed = ViewBindings.findChildViewById(rootView, id);
      if (tvHighlightRed == null) {
        break missingId;
      }

      id = R.id.tv_highlight_red_text;
      TextView tvHighlightRedText = ViewBindings.findChildViewById(rootView, id);
      if (tvHighlightRedText == null) {
        break missingId;
      }

      id = R.id.tv_territory_outlet;
      TextView tvTerritoryOutlet = ViewBindings.findChildViewById(rootView, id);
      if (tvTerritoryOutlet == null) {
        break missingId;
      }

      return new ActivityTakeOrderBinding((LinearLayout) rootView, btnSync, listViewShowOutlet,
          llEmptyList, llHighlight, llSync, rl1, spnrDistributr, spnrRoute, totalOutlet,
          tvHighlightGreen, tvHighlightGreenText, tvHighlightRed, tvHighlightRedText,
          tvTerritoryOutlet);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
