// Generated by view binder compiler. Do not edit!
package com.malas.appsr.malasapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.malas.appsr.malasapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityReportGridBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageView imgAverageBill;

  @NonNull
  public final ImageView imgAvgLineCut;

  @NonNull
  public final ImageView imgProductivity;

  @NonNull
  public final ImageView imgTarget;

  @NonNull
  public final ImageView imgTopview;

  @NonNull
  public final ImageView imgUniqueBillValue;

  @NonNull
  public final LinearLayout llAverageBillValue;

  @NonNull
  public final LinearLayout llAvgLineCut;

  @NonNull
  public final LinearLayout llProductivityReport;

  @NonNull
  public final LinearLayout llTarget;

  @NonNull
  public final LinearLayout llTopviewReport;

  @NonNull
  public final LinearLayout llUniqueBillValue;

  @NonNull
  public final RelativeLayout rl1;

  private ActivityReportGridBinding(@NonNull ScrollView rootView, @NonNull ImageView imgAverageBill,
      @NonNull ImageView imgAvgLineCut, @NonNull ImageView imgProductivity,
      @NonNull ImageView imgTarget, @NonNull ImageView imgTopview,
      @NonNull ImageView imgUniqueBillValue, @NonNull LinearLayout llAverageBillValue,
      @NonNull LinearLayout llAvgLineCut, @NonNull LinearLayout llProductivityReport,
      @NonNull LinearLayout llTarget, @NonNull LinearLayout llTopviewReport,
      @NonNull LinearLayout llUniqueBillValue, @NonNull RelativeLayout rl1) {
    this.rootView = rootView;
    this.imgAverageBill = imgAverageBill;
    this.imgAvgLineCut = imgAvgLineCut;
    this.imgProductivity = imgProductivity;
    this.imgTarget = imgTarget;
    this.imgTopview = imgTopview;
    this.imgUniqueBillValue = imgUniqueBillValue;
    this.llAverageBillValue = llAverageBillValue;
    this.llAvgLineCut = llAvgLineCut;
    this.llProductivityReport = llProductivityReport;
    this.llTarget = llTarget;
    this.llTopviewReport = llTopviewReport;
    this.llUniqueBillValue = llUniqueBillValue;
    this.rl1 = rl1;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityReportGridBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityReportGridBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_report_grid, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityReportGridBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.img_average_bill;
      ImageView imgAverageBill = ViewBindings.findChildViewById(rootView, id);
      if (imgAverageBill == null) {
        break missingId;
      }

      id = R.id.img_avg_line_cut;
      ImageView imgAvgLineCut = ViewBindings.findChildViewById(rootView, id);
      if (imgAvgLineCut == null) {
        break missingId;
      }

      id = R.id.img_productivity;
      ImageView imgProductivity = ViewBindings.findChildViewById(rootView, id);
      if (imgProductivity == null) {
        break missingId;
      }

      id = R.id.img_target;
      ImageView imgTarget = ViewBindings.findChildViewById(rootView, id);
      if (imgTarget == null) {
        break missingId;
      }

      id = R.id.img_topview;
      ImageView imgTopview = ViewBindings.findChildViewById(rootView, id);
      if (imgTopview == null) {
        break missingId;
      }

      id = R.id.img_unique_bill_value;
      ImageView imgUniqueBillValue = ViewBindings.findChildViewById(rootView, id);
      if (imgUniqueBillValue == null) {
        break missingId;
      }

      id = R.id.ll_average_bill_value;
      LinearLayout llAverageBillValue = ViewBindings.findChildViewById(rootView, id);
      if (llAverageBillValue == null) {
        break missingId;
      }

      id = R.id.ll_avg_line_cut;
      LinearLayout llAvgLineCut = ViewBindings.findChildViewById(rootView, id);
      if (llAvgLineCut == null) {
        break missingId;
      }

      id = R.id.ll_productivity_report;
      LinearLayout llProductivityReport = ViewBindings.findChildViewById(rootView, id);
      if (llProductivityReport == null) {
        break missingId;
      }

      id = R.id.ll_target;
      LinearLayout llTarget = ViewBindings.findChildViewById(rootView, id);
      if (llTarget == null) {
        break missingId;
      }

      id = R.id.ll_topview_report;
      LinearLayout llTopviewReport = ViewBindings.findChildViewById(rootView, id);
      if (llTopviewReport == null) {
        break missingId;
      }

      id = R.id.ll_unique_bill_value;
      LinearLayout llUniqueBillValue = ViewBindings.findChildViewById(rootView, id);
      if (llUniqueBillValue == null) {
        break missingId;
      }

      id = R.id.rl1;
      RelativeLayout rl1 = ViewBindings.findChildViewById(rootView, id);
      if (rl1 == null) {
        break missingId;
      }

      return new ActivityReportGridBinding((ScrollView) rootView, imgAverageBill, imgAvgLineCut,
          imgProductivity, imgTarget, imgTopview, imgUniqueBillValue, llAverageBillValue,
          llAvgLineCut, llProductivityReport, llTarget, llTopviewReport, llUniqueBillValue, rl1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
